Important Text
#driver.get("https://www.realclearpolitics.com/epolls/2018/house/va/virginia_10th_district_comstock_vs_wexton-6348.html")
#driver.get("https://www.realclearpolitics.com/epolls/other/trump_favorableunfavorable-5493.html")
#Obtain the table
#https://chrome.google.com/webstore/detail/xpath-helper/hgimnogjllphhhkhlmebbmlgjoejdpjl#using xpath as an app just hold shift to get element

	#Scoring Sentiment
	#Adds a sentiment score to each line of tweets
	sentiment.Sentiment(collection_of_tweets)
	
https://twitter.com/search?f=tweets&vertical=default&q=from%3Ajenniferwexton%20since%3A2018-06-21%20until%3A2018-06-22include%3Aretweets&src=typd
https://twitter.com/search?f=tweets&vertical=default&q=from%3Ajenniferwexton%20since%3A2018-11-26%20until%3A2018-11-27include%3Aretweets&src=typd

['21 Jun 2018', "I'm proud to have the support of @Bradybuzz in our fight to flip #VA10! Republicans and the gun lobby have blocked gun violence prevention legislation for too long. #ChangeisComing this November.", '91', '27']
91 is likes
27 is retweets
#[date,body, likes, retweets]

#-----Collecting only a week before-----#
		"""for date in collection_of_polls:
			date_list = date.split("/")
			month = int(date_list[0])
			day = int(date_list[1])
			end = datetime.datetime(2018, month, day)# year, month, day
			start = end - timedelta(days=7)# a week back from the end
			print('\n\n'+ str(start) + " " + str(end) + '\n\n')"""
			
			
dayArray = [date, int(avglikes), int(avgretweets), int(toplikes), int(topretweets)]
	"""
	print("\nNEW LINE\n"+ end)
	try:
		print((collection_of_tweets[end][1]))
		print("\n")
		#Create features
		tweet = collection_of_tweets[end][1]
		negative, neutral, positive = sentiment.Sentiment(tweet[1])
		print("size", len(tweet[1]), "negative: ", negative, "neutral:", neutral,"positive:", positive, "likes", tweet[2],"retweets", tweet[3])
	except IndexError:
		pass
	"""
	
C:\Program Files (x86)\Microsoft Visual Studio\Shared\Python36_64

	"""with open(name_of_file, 'r') as fp:
		collection_of_tweets = json.load(fp)
	for candidate in collection_of_tweets.keys():
		print(collection_of_tweets[candidate], "\n")"""
		
		
(array([[0.00172978, 0.06625577, 0.00816722, 0.1892388 ],
       [0.02225669, 0.06053667, 0.07629531, 0.02418538],
       [0.00106769, 0.00236637, 0.00670665, 0.33573116],
       [0.04132664, 0.02179714, 0.07445576, 0.19665581],
       [0.01782951, 0.05813773, 0.05666512, 0.01181099]]), array([[1.38695770e-02],
       [3.07125640e-03],
       [1.67066943e-03],
       [5.28457924e-05]]))
	   
	   
	   
	   
#TODO
sentiment that can run overnight
fix/clean up code
MATH

NUMBER OF CANDIDATES

class scoringMatrixOverTime:
	def __init__(self, in_matrix, out_matrix):
		self.weights_in_hidden = in_matrix
		self.weight_hidden_out = out_matrix
		
	def __init__(self, num_of_factors = None, num_of_weights = None, learning_rate = None, method = None, in_matrix = None, out_matrix = None):
		if learning_rate is not None:
			self.num_of_factors = num_of_factors
			self.num_of_weights = num_of_weights
			self.learning_rate = learning_rate
			self.method = method
			
			self.create_weight_matrice()
		else:
			self.weights_in_hidden = in_matrix
			self.weights_hidden_out = out_matrix
		
		
	def create_weight_matrice(self):
		self.weights_in_hidden = np.random.rand(self.num_of_factors, self.num_of_weights)
		self.weights_hidden_out = np.random.rand(self.num_of_weights, 1)
		
	def train(self, input_set, target_vector, start_value = 0):#Changed input
		# input_vector and target_vector can be tuple, list or ndarray
		output_vector2 = np.zeros(shape = (1,1))
		output_vector2[0,0] = start_value
		
							#RUN THROUGH AND FIGURE OUT ERROR IF WE JUST INTIALLY RAN IT#
		#------------------------------------------------------------------------------------------------------#								
		for input_vector in input_set:
			input_vector = np.array(input_vector, ndmin=2)
			target_vector = np.array(target_vector, ndmin=2)
			
			
			#input 
			output_vector1 = np.dot(input_vector, self.weights_in_hidden)
			output_vector_hidden = output_vector1
			
			#output
			output_vector2 += np.dot(output_vector_hidden, self.weights_hidden_out)
		
		#ERROR
		output_errors = target_vector - output_vector2   
		self.method("Output Vector: " + str(output_vector2))#Toggle print
		time.sleep(1)
		error = output_errors[0,0]
		if abs(error) < 3: return True
		sign_of_error = 1 if error >= 0 else -1
		sign_of_target = 1 if target_vector[0] >= start_value else -1#FIXED changed to 50
		sign_of_output = 1 if output_vector2[0] >= 0 else -1
		
		if(sign_of_output == sign_of_target):
			sign_of_comp = 1 #compatibility
		else:
			sign_of_comp = -1
		
		#Error should be large because it had compounded over time.

		
														#PART 1#
		#------------------------------------------------------------------------------------------------------#
		coefficient_of_error = (1-(-1*sign_of_comp * ((sigmoid((error))-1/2)) * self.learning_rate))*sign_of_comp
		
		self.method("COE FIRST PASS: " + str(coefficient_of_error) + str(sigmoid((error))) + str(error))
		
		self.weights_hidden_out =  (coefficient_of_error) * self.weights_hidden_out
		
		#print(self.weights_hidden_out)
		
		
														#PART 2#
		#-------------------------------------------------------------------------------------------------------#
		hidden_errors = np.dot(output_errors, self.weights_hidden_out.T) #returns [value1, value2, value3, ... valueN]

		identity_matrix = np.zeros((self.num_of_weights,self.num_of_weights))
		i = 0
		
		for err in hidden_errors[0]:
			sign_of_error = 1 if err >= 0 else -1
			#coefficient_of_error = (1-sigmoid(err))*err*sign_of_error  #normalize it
			coefficient_of_error = 1-(-1*sign_of_comp * ((sigmoid((err))-1/2)) * self.learning_rate)
			
			self.method("HIDDEN ERROR "+str(i)+":"+ str(err)+str(coefficient_of_error))
			identity_matrix[i][i] = coefficient_of_error
			i+=1
		
		tmp = (np.dot(self.weights_in_hidden , identity_matrix)) #matrix that has been modified
		self.weights_in_hidden = tmp
		return False
		
		
	def run(self, input_set, start_value = 0):#set
		"""output_vector = np.dot(input_vector, self.weights_in_hidden)
		output_vector = np.dot(output_vector, self.weights_hidden_out)
		return output_vector"""#OG
		ylist = []
		xlist = []
		
		output_vector2 = np.zeros(shape = (1,1))
		output_vector2[0,0] = start_value
		for input_vector in input_set:
			input_vector = np.array(input_vector, ndmin=2)
			
			#input 
			output_vector1 = np.dot(input_vector, self.weights_in_hidden)
			output_vector_hidden = output_vector1
			
			#output
			output_vector2 += np.dot(output_vector_hidden, self.weights_hidden_out)
			#list.append(np.dot(output_vector_hidden, self.weights_hidden_out)[0][0])
			ylist.append(output_vector2[0][0])
			xlist.append(input_vector[0][0])
		return output_vector2, xlist, ylist

	def getMatrix(self):
		return self.weights_in_hidden, self.weights_hidden_out